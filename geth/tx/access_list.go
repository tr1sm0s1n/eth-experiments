package main

import (
	"context"
	"fmt"
	"math/big"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind/v2"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/tr1sm0s1n/eth-experiments/utils"
)

/* Storage.sol
// SPDX-License-Identifier: MIT
pragma solidity 0.8.18;

contract Storage {
    string message;

    function store(string memory _message) public {
        message = _message;
    }

    function retrieve() public view returns (string memory) {
        return message;
    }
}
*/

var StorageMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[],\"name\":\"retrieve\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_message\",\"type\":\"string\"}],\"name\":\"store\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x608060405234801561001057600080fd5b5061067c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063131a06801461003b5780632e64cec114610057575b600080fd5b61005560048036038101906100509190610274565b610075565b005b61005f610088565b60405161006c919061033c565b60405180910390f35b80600090816100849190610574565b5050565b6060600080546100979061038d565b80601f01602080910402602001604051908101604052809291908181526020018280546100c39061038d565b80156101105780601f106100e557610100808354040283529160200191610110565b820191906000526020600020905b8154815290600101906020018083116100f357829003601f168201915b5050505050905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61018182610138565b810181811067ffffffffffffffff821117156101a05761019f610149565b5b80604052505050565b60006101b361011a565b90506101bf8282610178565b919050565b600067ffffffffffffffff8211156101df576101de610149565b5b6101e882610138565b9050602081019050919050565b82818337600083830152505050565b6000610217610212846101c4565b6101a9565b90508281526020810184848401111561023357610232610133565b5b61023e8482856101f5565b509392505050565b600082601f83011261025b5761025a61012e565b5b813561026b848260208601610204565b91505092915050565b60006020828403121561028a57610289610124565b5b600082013567ffffffffffffffff8111156102a8576102a7610129565b5b6102b484828501610246565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156102f75780820151818401526020810190506102dc565b60008484015250505050565b600061030e826102bd565b61031881856102c8565b93506103288185602086016102d9565b61033181610138565b840191505092915050565b600060208201905081810360008301526103568184610303565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806103a557607f821691505b6020821081036103b8576103b761035e565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026104207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826103e3565b61042a86836103e3565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061047161046c61046784610442565b61044c565b610442565b9050919050565b6000819050919050565b61048b83610456565b61049f61049782610478565b8484546103f0565b825550505050565b600090565b6104b46104a7565b6104bf818484610482565b505050565b5b818110156104e3576104d86000826104ac565b6001810190506104c5565b5050565b601f821115610528576104f9816103be565b610502846103d3565b81016020851015610511578190505b61052561051d856103d3565b8301826104c4565b50505b505050565b600082821c905092915050565b600061054b6000198460080261052d565b1980831691505092915050565b6000610564838361053a565b9150826002028217905092915050565b61057d826102bd565b67ffffffffffffffff81111561059657610595610149565b5b6105a0825461038d565b6105ab8282856104e7565b600060209050601f8311600181146105de57600084156105cc578287015190505b6105d68582610558565b86555061063e565b601f1984166105ec866103be565b60005b82811015610614578489015182556001820191506020850194506020810190506105ef565b86831015610631578489015161062d601f89168261053a565b8355505b6001600288020188555050505b50505050505056fea26469706673582212201c06e55d1bab8d67487deb6183462147e654ed6ae39d778639050492766c1c2a64736f6c63430008120033",
}

func accessListTx() {
	fmt.Println(">>> Type 0x1 Transaction: BEGIN <<<")
	key, from, err := utils.GenerateAccount()
	if err != nil {
		fmt.Println("Failed to generate key:", err)
		return
	}

	sim, chainID := utils.GenerateBackend(from)
	auth := bind.NewKeyedTransactor(key, chainID)

	parsed, err := StorageMetaData.ParseABI()
	if err != nil {
		fmt.Println("Failed to parse metadata:", err)
		return
	}

	caddress, _, err := bind.DeployContract(auth, common.FromHex(StorageMetaData.Bin), sim.Client(), nil)
	if err != nil {
		fmt.Println("Failed to deploy contract:", err)
		return
	}

	sim.Commit()
	fmt.Println("    Contract Address:", caddress)

	input, err := parsed.Pack("store", "Hello, World!")
	if err != nil {
		fmt.Println("Failed to pack store:", err)
		return
	}

	nonce, err := sim.Client().PendingNonceAt(context.Background(), *from)
	if err != nil {
		fmt.Println("Failed to fetch nonce:", err)
		return
	}

	signedTx, _ := types.SignNewTx(key, types.LatestSignerForChainID(chainID), &types.AccessListTx{
		Nonce:    nonce,
		To:       &caddress,
		GasPrice: big.NewInt(1000000000),
		Gas:      48000,
		Data:     input,
		AccessList: []types.AccessTuple{
			{
				Address:     caddress,
				StorageKeys: []common.Hash{{0x0}},
			},
		},
	})

	err = sim.Client().SendTransaction(context.Background(), signedTx)
	if err != nil {
		fmt.Println("Failed to send trx:", err)
		return
	}

	sim.Commit()

	r, err := sim.Client().TransactionReceipt(context.Background(), signedTx.Hash())
	if err != nil {
		fmt.Println("Failed to generate receipt:", err)
		return
	}

	if r.Status != 1 {
		fmt.Println("Failed to commit trx")
		return
	}

	calldata, err := parsed.Pack("retrieve")
	if err != nil {
		fmt.Println("Failed to pack calldata:", err)
		return
	}

	data, err := bind.NewBoundContract(caddress, *parsed, sim.Client(), nil, nil).CallRaw(nil, calldata)
	if err != nil {
		fmt.Println("Failed to retrieve message:", err)
		return
	}

	out, err := parsed.Unpack("retrieve", data)
	if err != nil {
		fmt.Println("Failed to unpack data:", err)
		return
	}

	message := *abi.ConvertType(out[0], new(string)).(*string)

	fmt.Println("    Message:", message)
	fmt.Println(">>> Type 0x1 Transaction: END <<<")
}
